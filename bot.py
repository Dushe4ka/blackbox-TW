import os
import logging
import asyncio
import json
from typing import Dict, Any, List, Set
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
import pandas as pd
import numpy as np
from logger_config import setup_logger
from vector_store import VectorStore
from text_processor import TextProcessor
from llm_client import get_llm_client
from usecases.daily_news import analyze_trend
from database import (
    get_user_subscription,
    update_user_subscription,
    toggle_subscription,
    get_subscribed_users,
    create_subscription,
    save_sources_db,
    is_source_exists_db,
    get_sources,
    delete_source,
    get_categories
)
from celery_app.tasks.csv_processing_tasks import process_csv as process_csv_task
from celery_app.tasks.trend_analysis_tasks import analyze_trend_task
from celery_app.tasks.news_tasks import analyze_news_task
from csv_sources_reader import process_csv as process_csv_sources
import redis
import json
import urllib.parse
import hashlib

from celery_app.tasks.parse_embed_data import parse_and_vectorize_sources
from celery_app.tasks.auth_TG import periodic_telegram_auth_check, check_telegram_auth_status, process_auth_code
from session_path import SESSION_FILE
from celery_app.tasks.weekly_news_tasks import analyze_weekly_news_task
from aiogram3_calendar import SimpleCalendar, simple_cal_callback
import tempfile
from utils.admin_utils import is_admin, is_admin_chat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
vector_store = VectorStore()
text_processor = TextProcessor()
llm_client = get_llm_client()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CSVUpload(StatesGroup):
    waiting_for_file = State()

class SubscriptionStates(StatesGroup):
    waiting_for_category = State()

class RSSUpload(StatesGroup):
    waiting_for_category = State()
    waiting_for_rss = State()
    waiting_for_more_rss = State()

class TGUpload(StatesGroup):
    waiting_for_category = State()
    waiting_for_tg = State()
    waiting_for_more_tg = State()

class CustomStates(StatesGroup):
    analysis_query_category = State()
    analysis_query_input = State()
    analysis_daily_category = State()
    analysis_daily_date = State()
    analysis_weekly_category = State()
    analysis_weekly_date = State()

class SourcesManageStates(StatesGroup):
    viewing_sources = State()

def clean_source_data(source: Dict[str, Any]) -> Dict[str, Any]:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    cleaned = source.copy()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    for key in cleaned:
        if pd.isna(cleaned[key]):
            cleaned[key] = ''
        elif isinstance(cleaned[key], (float, np.float64)):
            cleaned[key] = str(cleaned[key])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π
    if not cleaned.get('content') and cleaned.get('description'):
        cleaned['content'] = cleaned['description']
    
    return cleaned

def print_source_info(source: Dict[str, Any], index: int):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
    logger.info(f"\n{'='*50}")
    logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ #{index + 1}:")
    logger.info(f"URL: {source.get('url', 'N/A')}")
    logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {source.get('title', 'N/A')}")
    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {source.get('description', 'N/A')}")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {source.get('category', 'N/A')}")
    logger.info(f"–î–∞—Ç–∞: {source.get('date', 'N/A')}")
    logger.info(f"–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source.get('source_type', 'N/A')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content = source.get('content', '')
    logger.info(f"–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content) if content else 0} —Å–∏–º–≤–æ–ª–æ–≤")
    if content:
        logger.info(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content[:200]}")
    logger.info(f"{'='*50}\n")

def get_main_menu_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="menu_sources")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑", callback_data="menu_analysis")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="menu_subscription")],
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="tg_auth_request_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_welcome_message(chat_id: int, is_admin=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é"""
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n\n"
        "üìä –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å —Å—Ñ–µ—Ä–∞—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ."
    )
    keyboard = get_main_menu_keyboard(is_admin=is_admin)
    await bot.send_message(chat_id=chat_id, text=welcome_text, reply_markup=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    admin_status = is_admin(message.from_user.id)
    await send_welcome_message(message.chat.id, is_admin=admin_status)

@dp.message(Command("main_menu"))
async def cmd_main_menu(message: types.Message):
    admin_status = is_admin(message.from_user.id)
    keyboard = get_main_menu_keyboard(is_admin=admin_status)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", reply_markup=keyboard)

@dp.message(CSVUpload.waiting_for_file)
async def process_csv_file(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–∞–π–ª, –∞ —Ç–µ–∫—Å—Ç "–ù–∞–∑–∞–¥" (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –º–æ–±–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    if message.text and message.text.strip() == "‚Üê –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        await state.clear()
        return
    if not message.document or not message.document.file_name.endswith('.csv'):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
                ]
            )
        )
        return

    file = await bot.get_file(message.document.file_id)
    with tempfile.NamedTemporaryFile(suffix=".csv", delete=False) as tmp:
        await bot.download_file(file.file_path, tmp.name)
        temp_file = tmp.name

    try:
        report = await process_csv_sources(temp_file, message)
        await message.answer(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ CSV –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {report['added']}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {report['skipped']}\n"
            f"–û—à–∏–±–æ–∫: {report['errors']}"
        )
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤?",
            reply_markup=get_parse_sources_keyboard()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        os.remove(temp_file)
    await state.clear()

@dp.my_chat_member()
async def on_bot_added_to_group(event: types.ChatMemberUpdated):
    if event.new_chat_member.status in ("member", "administrator") and event.old_chat_member.status == "left":
        chat_id = event.chat.id
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.\n\n"
            "–¢–µ–ø–µ—Ä—å —è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏ –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
            "\nüìä –ß—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å —Å—Ñ–µ—Ä–∞—Ö\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "\n‚ùóÔ∏è–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 14:00!‚ùóÔ∏è"
        )
        await bot.send_message(chat_id, text)

def get_subscription_id_and_type(obj):
    # –î–ª—è callback_query
    if hasattr(obj, 'from_user'):
        user_id = obj.from_user.id
    elif hasattr(obj, 'from_user_id'):
        user_id = obj.from_user_id
    else:
        user_id = None
    # –î–ª—è –≥—Ä—É–ø–ø
    if hasattr(obj, 'chat') and getattr(obj.chat, 'type', None) in ["group", "supergroup"]:
        return obj.chat.id, "group"
    # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (private)
    elif hasattr(obj, 'chat') and getattr(obj.chat, 'type', None) == "private":
        return user_id, "user"
    # Fallback (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ user_id)
    elif user_id is not None:
        return user_id, "user"
    else:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")


@dp.message(SubscriptionStates.waiting_for_category)
async def process_subscription_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    category = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription_id, subscription_type = get_subscription_id_and_type(message)
    subscription = get_user_subscription(subscription_id, subscription_type)
    
    if subscription:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        categories = subscription.get('categories', [])
        if category in categories:
            categories.remove(category)
            await message.answer(f"‚úÖ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
        else:
            categories.append(category)
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        
        update_user_subscription(subscription_id, subscription_type, categories)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        if create_subscription(subscription_id, subscription_type, [category]):
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    await state.clear()
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.callback_query(lambda c: c.data == "menu_sources")
async def menu_sources_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞", callback_data="sources_upload")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="sources_manage")],
            [InlineKeyboardButton(text="–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="parse_sources_menu")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    await callback_query.message.edit_text(
        "üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery):
    admin_status = is_admin(callback_query.from_user.id)
    keyboard = get_main_menu_keyboard(is_admin=admin_status)
    await callback_query.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "sources_upload")
async def sources_upload_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="CSV-—Ñ–∞–π–ª (–º–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)", callback_data="upload_csv")],
            [InlineKeyboardButton(text="RSS-–ª–µ–Ω—Ç–∞ (–æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞)", callback_data="upload_rss")],
            [InlineKeyboardButton(text="Telegram-–∫–∞–Ω–∞–ª (–æ–¥–∏–Ω –∫–∞–Ω–∞–ª)", callback_data="upload_tg")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")],
        ]
    )
    await callback_query.message.edit_text(
        "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n‚ùóÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö‚ùóÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=keyboard
    )

def category_to_callback(category: str) -> str:
    if category == "all":
        return "all"
    return hashlib.md5(category.encode('utf-8')).hexdigest()[:16]

def callback_to_category(callback: str, all_categories: list) -> str:
    if callback == "all":
        return "all"
    for cat in all_categories:
        if category_to_callback(cat) == callback:
            return cat
    return None

# --- –í–µ–∑–¥–µ, –≥–¥–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è callback_data –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@dp.callback_query(lambda c: c.data == "sources_manage")
async def sources_manage_callback(callback_query: types.CallbackQuery):
    sources = get_sources()
    categories_set = set(src.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for src in sources)
    category_buttons = [
        [InlineKeyboardButton(text=cat_name, callback_data=f"sources_manage_category_{category_to_callback(cat_name)}")]
        for cat_name in sorted(categories_set)
    ]
    category_buttons.append([InlineKeyboardButton(text="–í—Å–µ", callback_data="sources_manage_category_all")])
    category_buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")])
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=category_buttons)
    )

@dp.callback_query(lambda c: c.data.startswith("sources_manage_category_"))
async def sources_manage_category_callback(callback_query: types.CallbackQuery):
    category_hash = callback_query.data.replace("sources_manage_category_", "")
    sources = get_sources()
    categories_set = set(src.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for src in sources)
    category_filter = callback_to_category(category_hash, list(categories_set))
    filtered_sources = sources if category_filter == "all" else [src for src in sources if src.get('category') == category_filter]
    keyboard = create_sources_pagination_keyboard(filtered_sources, category_filter, page=0)
    total_sources = len(filtered_sources)
    if total_sources == 0:
        text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}):\n\n‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}):\n\nüìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("delete_source_"))
async def delete_source_callback(callback_query: types.CallbackQuery):
    # delete_source_{category_hash}_{source_idx}_{page}
    parts = callback_query.data.replace("delete_source_", "").split("_", 2)
    if len(parts) < 3:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    try:
        category_hash = parts[0]
        source_idx = int(parts[1])
        page = int(parts[2])
    except Exception:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    sources = get_sources()
    categories_set = set(src.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for src in sources)
    category_filter = callback_to_category(category_hash, list(categories_set))
    filtered_sources = sources if category_filter == "all" else [src for src in sources if src.get('category') == category_filter]
    if source_idx >= len(filtered_sources):
        await callback_query.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    url = filtered_sources[source_idx].get('url')
    if delete_source(url):
        await callback_query.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª—ë–Ω", show_alert=False)
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    try:
        sources = get_sources()
        categories_set = set(src.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for src in sources)
        category_filter = callback_to_category(category_hash, list(categories_set))
        filtered_sources = sources if category_filter == "all" else [src for src in sources if src.get('category') == category_filter]
        total_sources = len(filtered_sources)
        sources_per_page = 10
        total_pages = (total_sources + sources_per_page - 1) // sources_per_page
        if page >= total_pages and total_pages > 0:
            page = total_pages - 1
        keyboard = create_sources_pagination_keyboard(filtered_sources, category_filter, page=page)
        if total_sources == 0:
            text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}):\n\n‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}):\n\nüìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages}"
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await sources_manage_category_callback(callback_query)

@dp.callback_query(lambda c: c.data.startswith("sources_page_"))
async def sources_page_callback(callback_query: types.CallbackQuery):
    # sources_page_{category_hash}_{page}
    try:
        parts = callback_query.data.replace("sources_page_", "").split("_", 1)
        category_hash = parts[0]
        page = int(parts[1])
        sources = get_sources()
        categories_set = set(src.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') for src in sources)
        category_filter = callback_to_category(category_hash, list(categories_set))
        filtered_sources = sources if category_filter == "all" else [src for src in sources if src.get('category') == category_filter]
        keyboard = create_sources_pagination_keyboard(filtered_sources, category_filter, page=page)
        total_sources = len(filtered_sources)
        sources_per_page = 10
        total_pages = (total_sources + sources_per_page - 1) // sources_per_page
        if total_sources == 0:
            text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}):\n\n‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}):\n\nüìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages}"
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")

@dp.callback_query(lambda c: c.data == "sources_manage_category_all")
async def sources_manage_all_category_callback(callback_query: types.CallbackQuery):
    sources = get_sources()
    keyboard = create_sources_pagination_keyboard(sources, category_filter="all", page=0)
    total_sources = len(sources)
    if total_sources == 0:
        text = "üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\nüìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("noop_"))
async def noop_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è (noop)"""
    # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "menu_analysis")
async def menu_analysis_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="analysis_query")],
            [InlineKeyboardButton(text="–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="analysis_digest_menu")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    await callback_query.message.edit_text(
        "üìä –ê–Ω–∞–ª–∏–∑:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "menu_subscription")
async def menu_subscription_callback(callback_query: types.CallbackQuery):
    subscription_id, subscription_type = get_subscription_id_and_type(callback_query)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    categories = get_categories()
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_subs = get_user_subscription(subscription_id, subscription_type)["categories"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=(cat + (" ‚úÖ" if cat in user_subs else "")),
                callback_data=f"toggle_sub_{cat}")]
            for cat in categories
        ] + [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    )
    await callback_query.message.edit_text(
        "üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç:\n‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ —Å 14:00 –¥–æ 15:00‚ùóÔ∏è\n\n‚úÖ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("toggle_sub_"))
async def toggle_subscription_callback(callback_query: types.CallbackQuery):
    subscription_id, subscription_type = get_subscription_id_and_type(callback_query)
    cat = callback_query.data.replace("toggle_sub_", "")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_subs = get_user_subscription(subscription_id, subscription_type)["categories"]
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if cat in user_subs:
        user_subs.remove(cat)
    else:
        user_subs.append(cat)
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    update_user_subscription(subscription_id, subscription_type, user_subs)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    categories = get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=(categ + (" ‚úÖ" if categ in user_subs else "")),
                callback_data=f"toggle_sub_{categ}")]
            for categ in categories
        ] + [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    )
    await callback_query.message.edit_text(
        "üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç:\n‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ —Å 14:00 –¥–æ 15:00‚ùóÔ∏è\n\n‚úÖ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "upload_csv")
async def upload_csv_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
            ]
        )
    )
    await state.set_state(CSVUpload.waiting_for_file)

@dp.callback_query(lambda c: c.data == "upload_rss")
async def upload_rss_callback(callback_query: types.CallbackQuery, state: FSMContext):
    categories = vector_store.get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"rss_cat_{urllib.parse.quote(cat)}")] for cat in categories
        ] + [
            [InlineKeyboardButton(text="–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="rss_cat_custom")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
        ]
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞:", reply_markup=keyboard)
    await state.set_state(RSSUpload.waiting_for_category)

@dp.callback_query(lambda c: c.data.startswith("rss_cat_"))
async def rss_category_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    cat = callback_query.data.replace("rss_cat_", "")
    cat = urllib.parse.unquote(cat)
    if cat == "custom":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_rss")]]
            )
        )
        await state.set_state(RSSUpload.waiting_for_category)
        await state.update_data(rss_custom=True)
    else:
        await state.update_data(category=cat, rss_custom=False)
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ RSS-—Å—Å—ã–ª–∫—É:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_rss")]]
            )
        )
        await state.set_state(RSSUpload.waiting_for_rss)

@dp.message(RSSUpload.waiting_for_category)
async def rss_custom_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("rss_custom"):
        return
    await state.update_data(category=message.text.strip(), rss_custom=False)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text.strip()}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ RSS-—Å—Å—ã–ª–∫—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_rss")]]
        )
    )
    await state.set_state(RSSUpload.waiting_for_rss)

@dp.message(RSSUpload.waiting_for_rss)
async def process_rss_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    if not url.startswith("http"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É.")
        return
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "rss", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("rss")
            )
            await state.set_state(RSSUpload.waiting_for_more_rss)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
            await state.clear()

@dp.callback_query(lambda c: c.data == "upload_tg")
async def upload_tg_callback(callback_query: types.CallbackQuery, state: FSMContext):
    categories = vector_store.get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"tg_cat_{urllib.parse.quote(cat)}")] for cat in categories
        ] + [
            [InlineKeyboardButton(text="–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="tg_cat_custom")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
        ]
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞:", reply_markup=keyboard)
    await state.set_state(TGUpload.waiting_for_category)

@dp.callback_query(lambda c: c.data.startswith("tg_cat_"))
async def tg_category_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    cat = callback_query.data.replace("tg_cat_", "")
    cat = urllib.parse.unquote(cat)
    if cat == "custom":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_tg")]]
            )
        )
        await state.set_state(TGUpload.waiting_for_category)
        await state.update_data(tg_custom=True)
    else:
        await state.update_data(category=cat, tg_custom=False)
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_tg")]]
            )
        )
        await state.set_state(TGUpload.waiting_for_tg)

@dp.message(TGUpload.waiting_for_category)
async def tg_custom_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("tg_custom"):
        return
    await state.update_data(category=message.text.strip(), tg_custom=False)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text.strip()}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_tg")]]
        )
    )
    await state.set_state(TGUpload.waiting_for_tg)

@dp.message(TGUpload.waiting_for_tg)
async def process_tg_channel(message: types.Message, state: FSMContext):
    tg_id = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    # –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ username
    if tg_id.startswith("https://t.me/"):
        tg_id = tg_id.replace("https://t.me/", "").replace("/", "")
    tg_id = tg_id.lstrip("@")
    if not tg_id:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª.")
        return
    url = f"https://t.me/{tg_id}"
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "telegram", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ Telegram-–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω Telegram-–∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("tg")
            )
            await state.set_state(TGUpload.waiting_for_more_tg)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Telegram-–∫–∞–Ω–∞–ª–∞.")
            await state.clear()

@dp.message(RSSUpload.waiting_for_more_rss)
async def process_more_rss_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    if not url.startswith("http"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É.")
        return
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "rss", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("rss")
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
            await state.clear()

@dp.message(TGUpload.waiting_for_more_tg)
async def process_more_tg_channel(message: types.Message, state: FSMContext):
    tg_id = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    # –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ username
    if tg_id.startswith("https://t.me/"):
        tg_id = tg_id.replace("https://t.me/", "").replace("/", "")
    tg_id = tg_id.lstrip("@")
    if not tg_id:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª.")
        return
    url = f"https://t.me/{tg_id}"
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "telegram", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ Telegram-–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω Telegram-–∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("tg")
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Telegram-–∫–∞–Ω–∞–ª–∞.")
            await state.clear()

# –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–ª—è upload_rss –∏ upload_tg
@dp.callback_query(lambda c: c.data == "sources_upload")
async def back_to_sources_upload(callback_query: types.CallbackQuery, state: FSMContext):
    await sources_upload_callback(callback_query, state)

@dp.callback_query(lambda c: c.data == "upload_rss")
async def back_to_upload_rss(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_rss_callback(callback_query, state)

@dp.callback_query(lambda c: c.data == "upload_tg")
async def back_to_upload_tg(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_tg_callback(callback_query, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
@dp.callback_query(lambda c: c.data == "upload_rss", RSSUpload.waiting_for_more_rss)
async def back_to_upload_rss_from_more(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_rss_callback(callback_query, state)

@dp.callback_query(lambda c: c.data == "upload_tg", TGUpload.waiting_for_more_tg)
async def back_to_upload_tg_from_more(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_tg_callback(callback_query, state)

@dp.callback_query(lambda c: c.data == "parse_sources_menu")
async def parse_sources_menu_callback(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤?",
        reply_markup=get_parse_sources_keyboard()
    )

@dp.callback_query(lambda c: c.data == "parse_sources_confirm")
async def parse_sources_confirm_callback(callback_query: CallbackQuery, state: FSMContext):
    parse_and_vectorize_sources.delay(callback_query.message.chat.id)
    await callback_query.message.edit_text(
        "‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
    )
    await state.clear()

@dp.callback_query(lambda c: c.data == "parse_sources_cancel")
async def parse_sources_cancel_callback(callback_query: CallbackQuery):
    await callback_query.message.edit_text("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω.")

@dp.callback_query(lambda c: c.data.startswith("add_more_"))
async def add_more_sources_callback(callback_query: CallbackQuery, state: FSMContext):
    source_type = callback_query.data.replace("add_more_", "")
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    
    if source_type == "rss":
        await callback_query.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_rss")]]
            )
        )
        await state.set_state(RSSUpload.waiting_for_more_rss)
    elif source_type == "tg":
        await callback_query.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="upload_tg")]]
            )
        )
        await state.set_state(TGUpload.waiting_for_more_tg)

@dp.callback_query(lambda c: c.data == "finish_adding_sources")
async def finish_adding_sources_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )
    )
    await state.clear()

@dp.message(Command("tg_auth_status"))
async def cmd_tg_auth_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram.")
        return
    
    await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ Celery
    print(f"DEBUG: –ó–∞–ø—É—Å–∫–∞–µ–º check_telegram_auth_status.delay —Å chat_id: {message.chat.id}")
    check_telegram_auth_status.delay(message.chat.id)



@dp.callback_query(lambda c: c.data == "tg_auth_request_menu")
async def tg_auth_request_menu_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥", callback_data="tg_auth_request_confirm")],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="tg_auth_status_check")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    await callback_query.message.edit_text(
        "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Telegram:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "tg_auth_request_confirm")
async def tg_auth_request_confirm_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telegram.", show_alert=True)
        return
    
    await callback_query.message.edit_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ Celery
    periodic_telegram_auth_check.delay(callback_query.message.chat.id)

@dp.callback_query(lambda c: c.data == "tg_auth_status_check")
async def tg_auth_status_check_callback(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram.", show_alert=True)
        return
    
    await callback_query.message.edit_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ Celery
    print(f"DEBUG: –ó–∞–ø—É—Å–∫–∞–µ–º check_telegram_auth_status.delay —Å chat_id: {callback_query.message.chat.id}")
    check_telegram_auth_status.delay(callback_query.message.chat.id)

@dp.callback_query(lambda c: c.data == "analysis_digest_menu")
async def analysis_digest_menu_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π", callback_data="analysis_daily")],
            [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="analysis_weekly")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_analysis")],
        ]
    )
    await callback_query.message.edit_text(
        "üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=keyboard
    )

# –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
@dp.callback_query(lambda c: c.data == "analysis_query")
async def analysis_query_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    categories = VectorStore().get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat, callback_data=f"analysis_query_cat_{urllib.parse.quote(cat)}")] for cat in categories] +
        [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_analysis")]]
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CustomStates.analysis_query_category)

@dp.callback_query(lambda c: c.data.startswith("analysis_query_cat_"))
async def analysis_query_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("analysis_query_cat_", "")
    category = urllib.parse.unquote(category)
    await state.update_data(category=category)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
    )
    await state.set_state(CustomStates.analysis_query_input)

@dp.message(CustomStates.analysis_query_input)
async def analysis_query_run(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    user_query = message.text.strip()
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Å–∞.")
    analyze_trend_task.delay(category=category, user_query=user_query, chat_id=message.chat.id)
    await state.clear()

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–∞—Ç—ã
@dp.callback_query(lambda c: c.data == "analysis_daily")
async def analysis_daily_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    categories = VectorStore().get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat, callback_data=f"analysis_daily_cat_{urllib.parse.quote(cat)}")] for cat in categories] +
        [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="analysis_digest_menu")]]
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CustomStates.analysis_daily_category)

@dp.callback_query(lambda c: c.data.startswith("analysis_daily_cat_"))
async def analysis_daily_date_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("analysis_daily_cat_", "")
    category = urllib.parse.unquote(category)
    await state.update_data(category=category)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(CustomStates.analysis_daily_date)

@dp.callback_query(simple_cal_callback.filter(), CustomStates.analysis_daily_date)
async def process_daily_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        data = await state.get_data()
        category = data.get("category")
        date_str = date.strftime("%Y-%m-%d")
        await callback_query.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Å–∞.")
        analyze_news_task.delay(category=category, analysis_date=date_str, chat_id=callback_query.message.chat.id)
        await state.clear()

@dp.callback_query(lambda c: c.data == "analysis_weekly")
async def analysis_weekly_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    categories = VectorStore().get_categories()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat, callback_data=f"analysis_weekly_cat_{urllib.parse.quote(cat)}")] for cat in categories] +
        [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="analysis_digest_menu")]]
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CustomStates.analysis_weekly_category)

@dp.callback_query(lambda c: c.data.startswith("analysis_weekly_cat_"))
async def analysis_weekly_date_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.replace("analysis_weekly_cat_", "")
    category = urllib.parse.unquote(category)
    await state.update_data(category=category)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–µ–¥–µ–ª–∏:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(CustomStates.analysis_weekly_date)

@dp.callback_query(simple_cal_callback.filter(), CustomStates.analysis_weekly_date)
async def process_weekly_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        data = await state.get_data()
        category = data.get("category")
        date_str = date.strftime("%Y-%m-%d")
        await callback_query.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.")
        analyze_weekly_news_task.delay(category=category, analysis_start_date=date_str, chat_id=callback_query.message.chat.id)
        await state.clear()

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="main_menu", description="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞"),
        types.BotCommand(command="tg_auth_status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"),
    ]
    await bot.set_my_commands(commands)

#-----------------------------------------------------------------------
#–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram
#-----------------------------------------------------------------------

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Redis –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
AUTH_STATE_KEY_PREFIX = "telegram_auth_state:"
PHONE_NUMBER = os.getenv('PHONE_NUMBER')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(lambda message: message.text and is_admin_chat(message.chat.id))
async def handle_auth_messages(message: types.Message, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç,
    –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    current_state = await state.get_state()
    if current_state is not None:
        # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∂–¥–µ—Ç —á–µ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ (—Ñ–∞–π–ª, –∫–∞—Ç–µ–≥–æ—Ä–∏—é), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
        
    auth_key = f"{AUTH_STATE_KEY_PREFIX}{PHONE_NUMBER}"
    state_raw = redis_client.get(auth_key)

    if not state_raw:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Celery
    await message.answer("‚è≥ –ü–æ–ª—É—á–∏–ª –∫–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    response_text = message.text.strip()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
    process_auth_code.delay(response_text, message.chat.id)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –ö–ù–û–ü–ö–ê –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê ---
def get_parse_sources_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="parse_sources_confirm")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="parse_sources_cancel")],
        ]
    )

# --- –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–û–í ---
def get_add_more_sources_keyboard(source_type: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", callback_data=f"add_more_{source_type}")],
            [InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="parse_sources_confirm")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_adding_sources")],
        ]
    )

def create_sources_pagination_keyboard(sources: List[Dict], category_filter: str = "all", page: int = 0, sources_per_page: int = 10):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    total_sources = len(sources)
    total_pages = (total_sources + sources_per_page - 1) // sources_per_page
    
    if total_sources == 0:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")]]
        )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = max(0, min(page, total_pages - 1))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * sources_per_page
    end_idx = min(start_idx + sources_per_page, total_sources)
    page_sources = sources[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    keyboard_rows = []
    for i, src in enumerate(page_sources):
        source_idx = start_idx + i
        source_type = src.get('type', '?')
        source_url = src.get('url', '')
        # –û–±—Ä–µ–∑–∞–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_url = source_url[:30] + "..." if len(source_url) > 30 else source_url
        
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"{source_type}: {display_url}", 
                callback_data=f"noop_{category_to_callback(category_filter)}_{source_idx}_{page}"
            ),
            InlineKeyboardButton(
                text="‚ùå", 
                callback_data=f"delete_source_{category_to_callback(category_filter)}_{source_idx}_{page}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"sources_page_{category_to_callback(category_filter)}_{page-1}"))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    nav_buttons.append(InlineKeyboardButton(
        text=f"{page+1}/{total_pages}", 
        callback_data="noop_page_info"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"sources_page_{category_to_callback(category_filter)}_{page+1}"))
    
    if nav_buttons:
        keyboard_rows.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_rows.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"DEBUG: SESSION_FILE –≤ bot.py = {SESSION_FILE}")
print(f"DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(SESSION_FILE + '.session')}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_commands()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    asyncio.run(main())