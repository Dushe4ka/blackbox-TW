# auth_tg.py

import os
import logging
import json
import redis
import asyncio
import requests
from celery import shared_task
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
import sys
from pathlib import Path

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ blackbox)
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SESSION_FILE –∏–∑ session_path
from session_path import SESSION_FILE

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —á–∞—Ç–∞–º–∏
try:
    from utils.admin_utils import is_admin_chat, get_admin_chat_ids
except ImportError:
    # –ï—Å–ª–∏ utils –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def is_admin_chat(chat_id):
        admin_chat_ids_str = os.getenv("ADMIN_CHAT_ID", "")
        if not admin_chat_ids_str:
            return False
        chat_id_str = str(chat_id)
        admin_chat_ids = [admin_chat_id.strip() for admin_chat_id in admin_chat_ids_str.split(",")]
        return chat_id_str in admin_chat_ids
    
    def get_admin_chat_ids():
        admin_chat_ids_str = os.getenv("ADMIN_CHAT_ID", "")
        if not admin_chat_ids_str:
            return []
        return [admin_chat_id.strip() for admin_chat_id in admin_chat_ids_str.split(",")]

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"DEBUG: SESSION_FILE –≤ auth_TG.py = {SESSION_FILE}")
print(f"DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(SESSION_FILE + '.session')}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –ª–æ–≥–≥–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ. –ò–Ω–∞—á–µ –±—É–¥–µ—Ç –±–∞–∑–æ–≤—ã–π.
try:
    from logger_config import setup_logger
    log = setup_logger("auth_TG")
except ImportError:
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    log = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# --- –ö–ª–∏–µ–Ω—Ç Redis ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à Redis –∑–∞–ø—É—â–µ–Ω –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É
try:
    redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
    redis_client.ping() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.")
except redis.exceptions.ConnectionError as e:
    log.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis —Å–µ—Ä–≤–µ—Ä.")
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ª–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
    redis_client = None


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
AUTH_STATE_KEY_PREFIX = "telegram_auth_state:"

def send_admin_notification(text: str, keyboard=None, specific_chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram Bot API."""
    if not TELEGRAM_BOT_TOKEN:
        log.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—É–¥–∞
    if specific_chat_id:
        if not is_admin_chat(specific_chat_id):
            log.warning(f"Chat ID {specific_chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—Å–∫–∏–º. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        chat_ids = [str(specific_chat_id)]
    else:
        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï–ú –∞–¥–º–∏–Ω–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞
        admin_chat_ids = get_admin_chat_ids()
        if not admin_chat_ids:
            log.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return
        chat_ids = admin_chat_ids
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    for chat_id in chat_ids:
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        if keyboard:
            payload["reply_markup"] = json.dumps(keyboard)
        
        try:
            response = requests.post(url, data=payload, timeout=10)
            response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å –Ω–µ 2xx
            log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É (ID: {chat_id})")
        except requests.RequestException as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {chat_id}: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

@shared_task(name="celery_app.tasks.auth_TG.periodic_telegram_auth_check")
def periodic_telegram_auth_check(chat_id=None):
    """–ó–∞–¥–∞—á–∞ Celery: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram...")
    if not redis_client:
        log.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.")
        return
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Celery
        asyncio.run(initiate_auth_if_needed(chat_id))
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ periodic_telegram_auth_check: {e}", exc_info=True)


async def initiate_auth_if_needed(chat_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞."""
    if not all([API_ID, API_HASH, PHONE_NUMBER]):
        log.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API_ID, API_HASH –∏–ª–∏ PHONE_NUMBER. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return

    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    # –ö–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth_key = f"{AUTH_STATE_KEY_PREFIX}{PHONE_NUMBER}"

    if redis_client.exists(auth_key):
        log.info("–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    try:
        await client.connect()
        if await client.is_user_authorized():
            log.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram –∞–∫—Ç–∏–≤–Ω–∞.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            message = (
                "‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –∞–∫—Ç–∏–≤–Ω–∞!**\n\n"
                "üîê –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
                "üì± –ü–∞—Ä—Å–µ—Ä Telegram-–∫–∞–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
                "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚Üê –ù–∞–∑–∞–¥", "callback_data": "tg_auth_request_menu"}]
                ]
            }
            
            send_admin_notification(message, keyboard, chat_id)
            return

        log.info("‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram. –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å...")
        sent_code = await client.send_code_request(PHONE_NUMBER)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redis –Ω–∞ 10 –º–∏–Ω—É—Ç
        state = {
            "status": "awaiting_code",
            "phone_code_hash": sent_code.phone_code_hash
        }
        redis_client.set(auth_key, json.dumps(state), ex=600)

        message = (
            "ü§ñ **–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!**\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä—è–º–æ —Å—é–¥–∞**.\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = {
            "inline_keyboard": [
                [{"text": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "callback_data": "tg_auth_status_check"}],
                [{"text": "‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
            ]
        }
        
        send_admin_notification(message, keyboard, chat_id)

    except Exception as e:
        log.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
    finally:
        if client.is_connected():
            await client.disconnect()


@shared_task(name="celery_app.tasks.auth_TG.process_auth_code")
def process_auth_code(code: str, chat_id: int):
    """–ó–∞–¥–∞—á–∞ Celery: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    log.info(f"üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Celery
        asyncio.run(process_auth_code_async(code, chat_id))
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ process_auth_code: {e}", exc_info=True)
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"
        send_message_to_chat(chat_id, error_message)


async def process_auth_code_async(code: str, chat_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    if not all([API_ID, API_HASH, PHONE_NUMBER]):
        error_msg = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API_ID, API_HASH –∏–ª–∏ PHONE_NUMBER."
        send_message_to_chat(chat_id, error_msg)
        return

    auth_key = f"{AUTH_STATE_KEY_PREFIX}{PHONE_NUMBER}"
    state_raw = redis_client.get(auth_key)

    if not state_raw:
        error_msg = "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥."
        send_message_to_chat(chat_id, error_msg)
        return

    auth_state = json.loads(state_raw)
    current_status = auth_state.get("status")

    if current_status not in ["awaiting_code", "awaiting_password"]:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {current_status}"
        send_message_to_chat(chat_id, error_msg)
        return

    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)

    try:
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
        if client.session is None:
            log.error("–°–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            send_message_to_chat(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            redis_client.delete(auth_key)
            return
        
        log.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–µ—Å—Å–∏—è: {type(client.session).__name__}")
        log.info(f"–ú–µ—Ç–æ–¥ save –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(client.session, 'save')}")
        if hasattr(client.session, 'save'):
            log.info(f"–ú–µ—Ç–æ–¥ save –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π: {asyncio.iscoroutinefunction(client.session.save)}")

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –∏–ª–∏ –ø–∞—Ä–æ–ª–µ–º
        try:
            if current_status == "awaiting_code":
                await client.sign_in(
                    phone=PHONE_NUMBER,
                    code=code,
                    phone_code_hash=auth_state["phone_code_hash"]
                )
            elif current_status == "awaiting_password":
                await client.sign_in(password=code)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            if hasattr(client.session, 'save'):
                if asyncio.iscoroutinefunction(client.session.save):
                    await client.session.save()
                else:
                    client.session.save()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–ª—Å—è
                session_file = f"{SESSION_FILE}.session"
                if os.path.exists(session_file):
                    session_size = os.path.getsize(session_file)
                    log.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {session_file}, —Ä–∞–∑–º–µ—Ä: {session_size} –±–∞–π—Ç")
                    send_message_to_chat(chat_id, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({session_size} –±–∞–π—Ç)")
                else:
                    log.error("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    send_message_to_chat(chat_id, "‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å")
            else:
                log.error("–ú–µ—Ç–æ–¥ save –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
                send_message_to_chat(chat_id, "‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Redis
            redis_client.delete(auth_key)
            
        except SessionPasswordNeededError:
            log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            send_message_to_chat(chat_id, "üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
            auth_state["status"] = "awaiting_password"
            redis_client.set(auth_key, json.dumps(auth_state), ex=600)
        except Exception as sign_in_error:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –∫–æ–¥–æ–º: {sign_in_error}")
            send_message_to_chat(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {sign_in_error}")
            redis_client.delete(auth_key)

    except Exception as e:
        log.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {e}", exc_info=True)
        send_message_to_chat(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {e}")
        redis_client.delete(auth_key)
    finally:
        if client.is_connected():
            await client.disconnect()


@shared_task(name="celery_app.tasks.auth_TG.check_telegram_auth_status")
def check_telegram_auth_status(chat_id: int):
    """–ó–∞–¥–∞—á–∞ Celery: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç."""
    log.info(f"üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
    log.info(f"DEBUG: chat_id —Ç–∏–ø: {type(chat_id)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {chat_id}")
    log.info(f"DEBUG: ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Celery
        asyncio.run(check_auth_status_async(chat_id))
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ check_telegram_auth_status: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"
        send_message_to_chat(chat_id, error_message)


async def check_auth_status_async(chat_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    if not all([API_ID, API_HASH, PHONE_NUMBER]):
        error_msg = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API_ID, API_HASH –∏–ª–∏ PHONE_NUMBER."
        send_message_to_chat(chat_id, error_msg)
        return

    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    try:
        await client.connect()
        
        session_file = f"{SESSION_FILE}.session"
        session_exists = os.path.exists(session_file)
        session_size = os.path.getsize(session_file) if session_exists else 0
        is_authorized = await client.is_user_authorized()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        session_type = type(client.session).__name__ if client.session else "None"
        log.info(f"–¢–∏–ø —Å–µ—Å—Å–∏–∏: {session_type}")
        log.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {session_exists}")
        log.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {session_size}")
        log.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞: {is_authorized}")
        
        status_text = f"üìä **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram:**\n\n"
        status_text += f"üîë –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {'‚úÖ –ù–∞–π–¥–µ–Ω' if session_exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
        if session_exists:
            status_text += f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {session_size} –±–∞–π—Ç\n"
        status_text += f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if is_authorized else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}\n"
        status_text += f"üîß –¢–∏–ø —Å–µ—Å—Å–∏–∏: {session_type}\n"
        
        if is_authorized:
            try:
                me = await client.get_me()
                status_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''} (@{me.username or '–±–µ–∑ username'})\n"
            except Exception as e:
                status_text += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if is_authorized:
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚Üê –ù–∞–∑–∞–¥", "callback_data": "tg_auth_request_menu"}]
                ]
            }
        else:
            keyboard = {
                "inline_keyboard": [
                    [{"text": "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥", "callback_data": "tg_auth_request_confirm"}],
                    [{"text": "‚Üê –ù–∞–∑–∞–¥", "callback_data": "tg_auth_request_menu"}]
                ]
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        send_message_to_chat(chat_id, status_text, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}"
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
        send_message_to_chat(chat_id, error_msg)
    finally:
        if client.is_connected():
            await client.disconnect()


def send_message_to_chat(chat_id: int, text: str, keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ Telegram Bot API."""
    if not TELEGRAM_BOT_TOKEN:
        log.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
    if not isinstance(chat_id, int) or chat_id <= 0:
        log.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id: {chat_id} (—Ç–∏–ø: {type(chat_id)})")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—Å–∫–∏–º —á–∞—Ç–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not is_admin_chat(chat_id):
        log.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}, –Ω–æ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—Å–∫–∏–º. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    
    if keyboard:
        payload["reply_markup"] = json.dumps(keyboard)
    
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.HTTPError as e:
        if response.status_code == 400:
            log.error(f"400 Bad Request –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}. –û—Ç–≤–µ—Ç API: {response.text}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ parse_mode
            try:
                payload.pop("parse_mode", None)
                response2 = requests.post(url, data=payload, timeout=10)
                response2.raise_for_status()
                log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} –±–µ–∑ parse_mode")
            except requests.exceptions.RequestException as e2:
                log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –¥–∞–∂–µ –±–µ–∑ parse_mode: {e2}")
        else:
            log.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
    except requests.RequestException as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")


def send_message_to_all_admins(text: str, keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if not TELEGRAM_BOT_TOKEN:
        log.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    admin_chat_ids = get_admin_chat_ids()
    if not admin_chat_ids:
        log.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for chat_id in admin_chat_ids:
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        
        if keyboard:
            payload["reply_markup"] = json.dumps(keyboard)
        
        try:
            response = requests.post(url, data=payload, timeout=10)
            response.raise_for_status()
            log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (ID: {chat_id})")
        except requests.exceptions.HTTPError as e:
            if response.status_code == 400:
                log.error(f"400 Bad Request –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}. –û—Ç–≤–µ—Ç API: {response.text}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ parse_mode
                try:
                    payload.pop("parse_mode", None)
                    response2 = requests.post(url, data=payload, timeout=10)
                    response2.raise_for_status()
                    log.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} –±–µ–∑ parse_mode")
                except requests.exceptions.RequestException as e2:
                    log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –¥–∞–∂–µ –±–µ–∑ parse_mode: {e2}")
            else:
                log.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
        except requests.RequestException as e:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")