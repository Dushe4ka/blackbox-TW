# auth_tg.py

import os
import logging
import json
import redis
import asyncio
import requests
from celery import shared_task
from telethon import TelegramClient
import sys
from pathlib import Path

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ blackbox)
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SESSION_FILE –∏–∑ session_path
from session_path import SESSION_FILE

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"DEBUG: SESSION_FILE –≤ auth_TG.py = {SESSION_FILE}")
print(f"DEBUG: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(SESSION_FILE + '.session')}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –ª–æ–≥–≥–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ. –ò–Ω–∞—á–µ –±—É–¥–µ—Ç –±–∞–∑–æ–≤—ã–π.
try:
    from logger_config import setup_logger
    log = setup_logger("auth_TG")
except ImportError:
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    log = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# --- –ö–ª–∏–µ–Ω—Ç Redis ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à Redis –∑–∞–ø—É—â–µ–Ω –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É
try:
    redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
    redis_client.ping() # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.")
except redis.exceptions.ConnectionError as e:
    log.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis —Å–µ—Ä–≤–µ—Ä.")
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ª–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
    redis_client = None


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
AUTH_STATE_KEY_PREFIX = "telegram_auth_state:"

def send_admin_notification(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram Bot API."""
    if not TELEGRAM_BOT_TOKEN or not ADMIN_CHAT_ID:
        log.warning("TELEGRAM_BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ HTTP-—Å—Ç–∞—Ç—É—Å –Ω–µ 2xx
        log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É (ID: {ADMIN_CHAT_ID})")
    except requests.RequestException as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

@shared_task(name="celery_app.tasks.auth_TG.periodic_telegram_auth_check")
def periodic_telegram_auth_check():
    """–ó–∞–¥–∞—á–∞ Celery: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram...")
    if not redis_client:
        log.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.")
        return
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Celery
        asyncio.run(initiate_auth_if_needed())
    except Exception as e:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ periodic_telegram_auth_check: {e}", exc_info=True)


async def initiate_auth_if_needed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞."""
    if not all([API_ID, API_HASH, PHONE_NUMBER]):
        log.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API_ID, API_HASH –∏–ª–∏ PHONE_NUMBER. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return

    client = TelegramClient(SESSION_FILE, API_ID, API_HASH)
    
    # –ö–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth_key = f"{AUTH_STATE_KEY_PREFIX}{PHONE_NUMBER}"

    if redis_client.exists(auth_key):
        log.info("–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    try:
        await client.connect()
        if await client.is_user_authorized():
            log.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram –∞–∫—Ç–∏–≤–Ω–∞.")
            return

        log.info("‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram. –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å...")
        sent_code = await client.send_code_request(PHONE_NUMBER)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redis –Ω–∞ 10 –º–∏–Ω—É—Ç
        state = {
            "status": "awaiting_code",
            "phone_code_hash": sent_code.phone_code_hash
        }
        redis_client.set(auth_key, json.dumps(state), ex=600)

        message = (
            "ü§ñ **–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ!**\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä—è–º–æ —Å—é–¥–∞**."
        )
        send_admin_notification(message)

    except Exception as e:
        log.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
    finally:
        if client.is_connected():
            await client.disconnect()