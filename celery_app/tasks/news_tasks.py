from celery_app import app
from usecases.daily_news import analyze_trend
import logging
from aiogram import Bot
import os
from dotenv import load_dotenv
import asyncio
import time
from celery import current_task
from datetime import datetime
from database import get_subscribed_users
from utils.message_utils import split_analysis_message, split_digest_message, format_message_part

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

async def send_all_messages(bot, chat_id, message_parts):
    for i, part in enumerate(message_parts, 1):
        await bot.send_message(chat_id=chat_id, text=part)
        if i < len(message_parts):
            await asyncio.sleep(0.5)
    await bot.session.close()

@app.task(bind=True, name='celery_app.tasks.news_tasks.analyze_news_task')
def analyze_news_task(self, category: str, analysis_date: str, chat_id: int = None) -> dict:
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    Args:
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_date: –î–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    start_time = time.time()
    worker_id = current_task.request.hostname
    process_id = os.getpid()
    worker_num = process_id % 5 + 1  # –ù–æ–º–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ (1-5)
    
    logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –Ω–∞—á–∞–ª –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π ===")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    logger.info(f"–î–∞—Ç–∞: {analysis_date}")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        result = analyze_trend(
            category=category,
            analysis_date=analysis_date
        )
        
        if result['status'] == 'success':
            message_parts = split_analysis_message(
                analysis_text=result['analysis'],
                materials_count=result['materials_count'],
                category=category,
                date=analysis_date,
                analysis_type='single_day'
            )
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(send_all_messages(bot, chat_id, [format_message_part(part, i+1, len(message_parts)) for i, part in enumerate(message_parts)]))
            execution_time = time.time() - start_time
            logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
            
            return {
                'status': 'success',
                'chat_id': chat_id,
                'parts_count': len(message_parts),
                'message': '–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
            }
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['message']}"
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(send_all_messages(bot, chat_id, [error_message]))
            execution_time = time.time() - start_time
            logger.error(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ—à–∏–±–∫–æ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
            
            return {
                'status': 'error',
                'chat_id': chat_id,
                'message': error_message
            }
            
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
        logger.error(error_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(send_all_messages(bot, chat_id, [error_message]))
        except Exception as bot_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(bot_error)}")
        
        execution_time = time.time() - start_time
        logger.error(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
        
        return {
            'status': 'error',
            'chat_id': chat_id,
            'message': error_message
        }

@app.task(bind=True, name='celery_app.tasks.news_tasks.send_daily_news')
def send_daily_news(self):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    """
    logger.info("=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ send_daily_news ===")
    start_time = time.time()
    worker_id = current_task.request.hostname
    process_id = os.getpid()
    worker_num = process_id % 5 + 1  # –ù–æ–º–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ (1-5)
    
    logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –Ω–∞—á–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ===")
    logger.info(f"Worker ID: {worker_id}")
    logger.info(f"Task ID: {self.request.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().strftime("%Y-%m-%d")
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = get_subscribed_users()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers) if subscribers else 0}")
        
        if not subscribers:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
            return {
                'status': 'success',
                'message': 'No subscribers found'
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        for subscriber in subscribers:
            chat_id = subscriber['user_id']
            categories = subscriber.get('categories', [])
            
            if not categories:
                logger.info(f"–£ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {chat_id} –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                continue
                
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {chat_id} —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {categories}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            all_results = []
            total_materials = 0
            
            for category in categories:
                logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                try:
                    result = analyze_trend(
                        category=category,
                        analysis_date=current_date
                    )
                    
                    if result['status'] == 'success':
                        all_results.append({
                            'category': category,
                            'materials_count': result['materials_count'],
                            'analysis': result['analysis']
                        })
                        total_materials += result['materials_count']
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {str(e)}")
                    all_results.append({
                        'category': category,
                        'error': str(e)
                    })
            
            if not all_results:
                logger.info(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {chat_id}")
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
            digest_text = ""
            for result in all_results:
                digest_text += f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}\n"
                if 'error' in result:
                    digest_text += f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n\n"
                else:
                    digest_text += (
                        f"üìä –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result['materials_count']}\n"
                        f"üìù –ê–Ω–∞–ª–∏–∑:\n{result['analysis']}\n\n"
                    )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            message_parts = split_digest_message(
                digest_text=digest_text,
                date=current_date,
                total_materials=total_materials
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
                asyncio.run(send_all_messages(bot, chat_id, [format_message_part(part, i+1, len(message_parts)) for i, part in enumerate(message_parts)]))
                logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫—É {chat_id} ({len(message_parts)} —á–∞—Å—Ç–µ–π)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {chat_id}: {str(e)}")
        
        execution_time = time.time() - start_time
        logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
        
        return {
            'status': 'success',
            'subscribers_count': len(subscribers)
        }
            
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
        logger.error(error_message)
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        
        execution_time = time.time() - start_time
        logger.error(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ—à–∏–±–∫–æ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
        
        return {
            'status': 'error',
            'message': error_message
        }
