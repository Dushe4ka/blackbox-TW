from celery_app import app
from usecases.daily_news import analyze_trend
import logging
from aiogram import Bot
import os
from dotenv import load_dotenv
import asyncio
import time
from celery import current_task
from datetime import datetime
from database import get_subscribed_users

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

@app.task(bind=True, name='celery_app.tasks.weekly_news_tasks.analyze_weekly_news_task')
def analyze_weekly_news_task(self, category: str, analysis_start_date: str, chat_id: int = None) -> dict:
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
    
    Args:
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    start_time = time.time()
    worker_id = current_task.request.hostname
    process_id = os.getpid()
    worker_num = process_id % 5 + 1  # –ù–æ–º–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ (1-5)
    
    logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –Ω–∞—á–∞–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π ===")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    logger.info(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏: {analysis_start_date}")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
        result = analyze_trend(
            category=category,
            analysis_start_date=analysis_start_date
        )
        
        if result['status'] == 'success':
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_message = (
                f"‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result['materials_count']}\n\n"
                f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n{result['analysis']}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(bot.send_message(chat_id=chat_id, text=result_message))
            asyncio.run(bot.session.close())
            
            execution_time = time.time() - start_time
            logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
            
            return {
                'status': 'success',
                'chat_id': chat_id,
                'result_message': result_message
            }
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['message']}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(bot.send_message(chat_id=chat_id, text=error_message))
            asyncio.run(bot.session.close())
            
            execution_time = time.time() - start_time
            logger.error(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ—à–∏–±–∫–æ–π –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
            
            return {
                'status': 'error',
                'chat_id': chat_id,
                'message': error_message
            }
            
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
        logger.error(error_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(bot.send_message(chat_id=chat_id, text=error_message))
            asyncio.run(bot.session.close())
        except Exception as bot_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(bot_error)}")
        
        execution_time = time.time() - start_time
        logger.error(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
        
        return {
            'status': 'error',
            'chat_id': chat_id,
            'message': error_message
        }
