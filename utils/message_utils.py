import re
from typing import List, Tuple
import logging

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram
MAX_MESSAGE_LENGTH = 4096
MAX_CAPTION_LENGTH = 1024

def split_message(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096 –¥–ª—è Telegram)
    
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'(?<=[.!?])\s+', text)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    if len(sentences) <= 1:
        words = text.split()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        if len(words) <= 1:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length —Å–∏–º–≤–æ–ª–æ–≤
            for i in range(0, len(text), max_length):
                part = text[i:i + max_length]
                if part:
                    parts.append(part)
            return parts
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
        current_part = ""
        
        for word in words:
            if len(current_part + " " + word) <= max_length:
                current_part += (" " + word) if current_part else word
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = word
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    for sentence in sentences:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞
        if len(sentence) > max_length:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if current_part:
                parts.append(current_part.strip())
                current_part = ""
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
            words = sentence.split()
            temp_part = ""
            
            for word in words:
                if len(temp_part + " " + word) <= max_length:
                    temp_part += (" " + word) if temp_part else word
                else:
                    if temp_part:
                        parts.append(temp_part.strip())
                    temp_part = word
            
            if temp_part:
                current_part = temp_part
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            if len(current_part + " " + sentence) <= max_length:
                current_part += (" " + sentence) if current_part else sentence
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_part:
                    parts.append(current_part.strip())
                current_part = sentence
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part.strip())
    
    return parts

def split_analysis_message(
    analysis_text: str,
    materials_count: int,
    category: str = None,
    date: str = None,
    analysis_type: str = None
) -> List[str]:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    Args:
        analysis_text: –¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        materials_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        date: –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ ("daily", "weekly", "trend_query", "single_day")
    
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    if analysis_type == "weekly":
        header = "‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    elif analysis_type == "single_day":
        header = "‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å—É—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    elif analysis_type == "trend_query":
        header = "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    else:
        header = "‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    if category:
        header += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
    if date:
        header += f"üìÖ –î–∞—Ç–∞: {date}\n"
    header += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {materials_count}\n\n"
    
    # –ï—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = header + f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n{analysis_text}"
    if len(full_message) <= MAX_MESSAGE_LENGTH:
        return [full_message]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    
    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    first_part = header + "üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
    remaining_length = MAX_MESSAGE_LENGTH - len(first_part)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ
    analysis_parts = split_message(analysis_text, remaining_length)
    
    if analysis_parts:
        first_part += analysis_parts[0]
        parts.append(first_part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
        for part in analysis_parts[1:]:
            parts.append(f"üìù –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:\n{part}")
    
    return parts

def split_digest_message(digest_text: str, date: str, total_materials: int) -> List[str]:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    Args:
        digest_text: –¢–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
        date: –î–∞—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        total_materials: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üì∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {date}\n\n"
    header += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_materials}\n\n"
    
    # –ï—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = header + digest_text
    if len(full_message) <= MAX_MESSAGE_LENGTH:
        return [full_message]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    
    # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    first_part = header
    remaining_length = MAX_MESSAGE_LENGTH - len(first_part)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ
    digest_parts = split_message(digest_text, remaining_length)
    
    if digest_parts:
        first_part += digest_parts[0]
        parts.append(first_part)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        for i, part in enumerate(digest_parts[1:], 2):
            parts.append(f"üì∞ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—á–∞—Å—Ç—å {i}):\n{part}")
    
    return parts

def format_message_part(part: str, part_number: int = None, total_parts: int = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ —á–∞—Å—Ç–∏
    
    Args:
        part: –¢–µ–∫—Å—Ç —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        part_number: –ù–æ–º–µ—Ä —á–∞—Å—Ç–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        total_parts: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if part_number and total_parts and total_parts > 1:
        return f"{part}\n\n--- –ß–∞—Å—Ç—å {part_number} –∏–∑ {total_parts} ---"
    return part 