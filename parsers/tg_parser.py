from telethon import TelegramClient
from database import save_source
from logger_config import setup_logger
import os
from dotenv import load_dotenv
import re
import asyncio
from session_path import SESSION_FILE
import sys

load_dotenv()


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
log = setup_logger("csv_reader")

print("API_ID:", os.getenv('API_ID'))
print("API_HASH:", os.getenv('API_HASH'))

def extract_channel_username(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏–∑ URL"""
    # –£–±–∏—Ä–∞–µ–º https://t.me/ –∏–ª–∏ @ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    username = re.sub(r'^https?://t\.me/', '', url)
    username = re.sub(r'^@', '', username)
    return username

async def ensure_authorized():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Telegram. –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None."""
    if not os.getenv('API_ID') or not os.getenv('API_HASH'):
        log.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API_ID –∏–ª–∏ API_HASH –≤ .env —Ñ–∞–π–ª–µ")
        return None
        
    if not os.getenv('PHONE_NUMBER'):
        log.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PHONE_NUMBER –≤ .env —Ñ–∞–π–ª–µ")
        return None

    client = TelegramClient(SESSION_FILE, os.getenv('API_ID'), os.getenv('API_HASH'))
    try:
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
        session_file = f"{SESSION_FILE}.session"
        if os.path.exists(session_file):
            log.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è Telegram: {session_file}")
            log.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {os.path.getsize(session_file)} –±–∞–π—Ç")
        else:
            log.warning(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        is_authorized = await client.is_user_authorized()
        log.info(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {is_authorized}")
        
        if not is_authorized:
            log.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫.")
            await client.disconnect()
            return None
        else:
            log.info("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Telegram (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
            try:
                me = await client.get_me()
                log.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or '–±–µ–∑ username'})")
            except Exception as e:
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
                
        return client
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        await client.disconnect()
        return None

async def parse_tg_channel(channel, category):
    log.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram-–∫–∞–Ω–∞–ª–∞: {channel}")
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞
        channel_username = extract_channel_username(channel)
        log.info(f"–ò–∑–≤–ª–µ—á–µ–Ω username –∫–∞–Ω–∞–ª–∞: {channel_username}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        client = await ensure_authorized()
        if not client:
            log.error("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return None

        if await client.is_bot():
            log.error("‚ùå –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –ø–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Telegram.")
            await client.disconnect()
            return None

        count = 0
        try:
            async for message in client.iter_messages(channel_username, limit=50):
                if message.text:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –≤ –±–∞–π—Ç–∞—Ö
                    def decode_if_bytes(value):
                        if isinstance(value, bytes):
                            try:
                                return value.decode('utf-8')
                            except UnicodeDecodeError:
                                return value.decode('cp1251')
                        return value

                    text = decode_if_bytes(message.text)
                    data = {
                        "url": f"https://t.me/{channel_username}/{message.id}",
                        "title": text[:100] if text else "",
                        "description": text,
                        "content": text,
                        "date": message.date,
                        "category": category,
                        "source_type": "telegram"
                    }
                    save_source(data)
                    print(f"üìÑ –°–ø–∞—Ä—Å–µ–Ω–æ: {text[:100]}... | https://t.me/{channel_username}/{message.id}")
                    count += 1
            log.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ {count} –ø–æ—Å—Ç–æ–≤ –∏–∑ {channel_username}")
            return count
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            return None
        finally:
            await client.disconnect()
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Telegram ({channel}): {str(e)}")
        return None

async def test_tg_parser():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–∞—Ä—Å–µ—Ä–∞ ===")
    channel = input("–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channelname –∏–ª–∏ https://t.me/channelname): ")
    category = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ")
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    result = await parse_tg_channel(channel, category)
    if result:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ {result} –ø–æ—Å—Ç–æ–≤")
    else:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")

if __name__ == "__main__":
    asyncio.run(test_tg_parser())
